from original import *
import shutil, glob
from easyfuncs import download_from_url, CachedModels
model_library = CachedModels()

with gr.Blocks(title="üîä",theme=gr.themes.Base(primary_hue="rose",neutral_hue="zinc")) as app:
    with gr.Tabs():
        with gr.TabItem("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å"):
            with gr.Row():
                voice_model = gr.Dropdown(label="–ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞:", choices=sorted(names), value=lambda:sorted(names)[0] if len(sorted(names)) > 0 else '', interactive=True)
                refresh_button = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å", variant="primary")
                vc_transform0 = gr.Slider(
                    minimum=-20,
                    maximum=20,
                    step=1,
                    label="–¢–æ–Ω",
                    value=0,
                    scale=2,
                    interactive=True,
                )
                but0 = gr.Button(value="üîä–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—åüîä", variant="primary")
            with gr.Row():
                with gr.Column():
                    with gr.Row():
                        dropbox = gr.File(label="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å'")
                    with gr.Row():
                        paths_for_files = lambda path:[os.path.abspath(os.path.join(path, f)) for f in os.listdir(path) if os.path.splitext(f)[1].lower() in ('.mp3', '.wav', '.flac', '.ogg')]
                        input_audio0 = gr.Dropdown(
                            label="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É:",
                            value=paths_for_files('audios')[0] if len(paths_for_files('audios')) > 0 else '',
                            choices=paths_for_files('audios'), # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ .mp3, .wav, .flac –∏–ª–∏ .ogg
                            allow_custom_value=True
                        )
                    with gr.Row():
                        audio_player = gr.Audio()
                        input_audio0.change(
                            inputs=[input_audio0],
                            outputs=[audio_player],
                            fn=lambda path: {"value":path,"__type__":"update"} if os.path.exists(path) else None
                        )
                        dropbox.upload(
                            fn=lambda audio:audio.name,
                            inputs=[dropbox],
                            outputs=[input_audio0])
                with gr.Column():
                    with gr.Accordion("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ index —Ñ–∞–π–ª–∞", open=False):
                        file_index2 = gr.Dropdown(
                            label="Index –º–æ–¥–µ–ª–∏:",
                            choices=sorted(index_paths),
                            interactive=True,
                            value=sorted(index_paths)[0] if len(sorted(index_paths)) > 0 else ''
                        )
                        index_rate1 = gr.Slider(
                            minimum=0,
                            maximum=1,
                            label="–°–∏–ª–∞ –∏–Ω–¥–µ–∫—Å–∞",
                            value=0.66,
                            interactive=True,
                        )
                    vc_output2 = gr.Audio(label="–í—ã—Ö–æ–¥")
                    with gr.Accordion("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
                        f0method0 = gr.Radio(
                            label="–ú–µ—Ç–æ–¥",
                            choices=["pm", "harvest", "crepe", "rmvpe"]
                            if config.dml == False
                            else ["pm", "harvest", "rmvpe"],
                            value="rmvpe",
                            interactive=True,
                        )
                        filter_radius0 = gr.Slider(
                            minimum=0,
                            maximum=7,
                            label="–°–Ω–∏–∂–µ–Ω–∏–µ —à—É–º–∞ –¥—ã—Ö–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Harvest)",
                            value=3,
                            step=1,
                            interactive=True,
                        )
                        resample_sr0 = gr.Slider(
                            minimum=0,
                            maximum=48000,
                            label="–ü–µ—Ä–µ–≤—ã–±–æ—Ä–∫–∞",
                            value=0,
                            step=1,
                            interactive=True,
                            visible=False
                        )
                        rms_mix_rate0 = gr.Slider(
                            minimum=0,
                            maximum=1,
                            label="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏",
                            value=0,
                            interactive=True,
                        )
                        protect0 = gr.Slider(
                            minimum=0,
                            maximum=0.5,
                            label="–ó–∞—â–∏—Ç–∞ –æ—Ç —à—É–º–∞ –¥—ã—Ö–∞–Ω–∏—è (0 - –≤–∫–ª—é—á–µ–Ω–æ, 0.5 - –≤—ã–∫–ª—é—á–µ–Ω–æ)",
                            value=0.33,
                            step=0.01,
                            interactive=True,
                        )
                        if voice_model != None: vc.get_vc(voice_model.value,protect0,protect0)
                    file_index1 = gr.Textbox(
                        label="–ü—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å–Ω–æ–º—É —Ñ–∞–π–ª—É",
                        interactive=True,
                        visible=False#–ó–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                    )
                    refresh_button.click(
                        fn=change_choices,
                        inputs=[],
                        outputs=[voice_model, file_index2],
                        api_name="infer_refresh",
                    )
                    refresh_button.click(
                        fn=lambda:{"choices":paths_for_files('audios'),"__type__":"update"}, #TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ 'audios' —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ '.wav', '.mp3', '.ogg' –∏–ª–∏ '.flac'
                        inputs=[],
                        outputs = [input_audio0],
                    )
                    refresh_button.click(
                        fn=lambda:{"value":paths_for_files('audios')[0],"__type__":"update"} if len(paths_for_files('audios')) > 0 else {"value":"","__type__":"update"}, #TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ 'audios' —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ '.wav', '.mp3', '.ogg' –∏–ª–∏ '.flac'
                        inputs=[],
                        outputs = [input_audio0],
                    )
            with gr.Row():
                f0_file = gr.File(label="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É F0", visible=False)
            with gr.Row():
                vc_output1 = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", placeholder="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",visible=False)
                but0.click(
                    vc.vc_single,
                    [
                        input_audio0,
                        vc_transform0,
                        f0_file,
                        f0method0,
                        file_index1,
                        file_index2,
                        index_rate1,
                        filter_radius0,
                        resample_sr0,
                        rms_mix_rate0,
                        protect0,
                    ],
                    [vc_output1, vc_output2],
                    api_name="infer_convert",
                )
                voice_model.change(
                    fn=vc.get_vc,
                    inputs=[voice_model, protect0, protect0],
                    outputs=[protect0, protect0, file_index2, file_index2],
                    api_name="infer_change_voice",
                )
        with gr.TabItem("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"):
            with gr.Row():
                url_input = gr.Textbox(label="URL –º–æ–¥–µ–ª–∏:", value="",placeholder="https://...", scale=6)
                name_output = gr.Textbox(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫:", value="",placeholder="Shanin",scale=2)
                url_download = gr.Button(value="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å",scale=2)
                url_download.click(
                    inputs=[url_input,name_output],
                    outputs=[url_input],
                    fn=download_from_url,
                )
            with gr.Row():
                model_browser = gr.Dropdown(choices=list(model_library.models.keys()),label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",scale=5)
                download_from_browser = gr.Button(value="–ü–æ–ª—É—á–∏—Ç—å",scale=2)
                download_from_browser.click(
                    inputs=[model_browser],
                    outputs=[model_browser],
                    fn=lambda model: download_from_url(model_library.models[model],model),
                )

    if config.iscolab:
        app.queue(concurrency_count=511, max_size=1022).launch(share=True)
    else:
        app.queue(concurrency_count=511, max_size=1022).launch(
            server_name="0.0.0.0",
            inbrowser=not config.noautoopen,
            server_port=config.listen_port,
            quiet=True,
        )
