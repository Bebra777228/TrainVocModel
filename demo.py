from original import *
import shutil, glob
from easyfuncs import download_from_url, CachedModels
os.makedirs("dataset",exist_ok=True)
model_library = CachedModels()

with gr.Blocks(title="üîä",theme=gr.themes.Base(primary_hue="rose",neutral_hue="zinc")) as app:
    with gr.Tabs():
        with gr.TabItem("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å"):
            with gr.Row():
                voice_model = gr.Dropdown(label="–ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞", choices=sorted(names), value=lambda:sorted(names)[0] if len(sorted(names)) > 0 else '', interactive=True)
                refresh_button = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å", variant="primary")
                spk_item = gr.Slider(
                    minimum=0,
                    maximum=2333,
                    step=1,
                    label="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏–∫–µ—Ä–∞",
                    value=0,
                    visible=False,
                    interactive=True,
                )
                vc_transform0 = gr.Number(
                    label="–¢–æ–Ω",
                    value=0
                )
                but0 = gr.Button(value="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å", variant="primary")
            with gr.Row():
                with gr.Column():
                    with gr.Row():
                        dropbox = gr.File(label="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å'.")
                    with gr.Row():
                        record_button=gr.Audio(source="microphone", label="–ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.", type="filepath")
                    with gr.Row():
                        paths_for_files = lambda path:[os.path.abspath(os.path.join(path, f)) for f in os.listdir(path) if os.path.splitext(f)[1].lower() in ('.mp3', '.wav', '.flac', '.ogg')]
                        input_audio0 = gr.Dropdown(
                            label="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É",
                            value=paths_for_files('audios')[0] if len(paths_for_files('audios')) > 0 else '',
                            choices=paths_for_files('audios'), # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ .mp3, .wav, .flac –∏–ª–∏ .ogg
                            allow_custom_value=True
                        )
                    with gr.Row():
                        audio_player = gr.Audio()
                        input_audio0.change(
                            inputs=[input_audio0],
                            outputs=[audio_player],
                            fn=lambda path: {"value":path,"__type__":"update"} if os.path.exists(path) else None
                        )
                        record_button.stop_recording(
                            fn=lambda audio:audio, #TODO —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å wav lambda
                            inputs=[record_button],
                            outputs=[input_audio0])
                        dropbox.upload(
                            fn=lambda audio:audio.name,
                            inputs=[dropbox],
                            outputs=[input_audio0])
                with gr.Column():
                    with gr.Accordion("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å", open=False):
                        file_index2 = gr.Dropdown(
                            label="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å",
                            choices=sorted(index_paths),
                            interactive=True,
                            value=sorted(index_paths)[0] if len(sorted(index_paths)) > 0 else ''
                        )
                        index_rate1 = gr.Slider(
                            minimum=0,
                            maximum=1,
                            label="–°–∏–ª–∞ –∏–Ω–¥–µ–∫—Å–∞",
                            value=0.5,
                            interactive=True,
                        )
                    vc_output2 = gr.Audio(label="–í—ã—Ö–æ–¥")
                    with gr.Accordion("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
                        f0method0 = gr.Radio(
                            label="–ú–µ—Ç–æ–¥",
                            choices=["pm", "harvest", "crepe", "rmvpe"]
                            if config.dml == False
                            else ["pm", "harvest", "rmvpe"],
                            value="rmvpe",
                            interactive=True,
                        )
                        filter_radius0 = gr.Slider(
                            minimum=0,
                            maximum=7,
                            label="–°–Ω–∏–∂–µ–Ω–∏–µ —à—É–º–∞ –¥—ã—Ö–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Harvest)",
                            value=3,
                            step=1,
                            interactive=True,
                        )
                        resample_sr0 = gr.Slider(
                            minimum=0,
                            maximum=48000,
                            label="–ü–µ—Ä–µ–≤—ã–±–æ—Ä–∫–∞",
                            value=0,
                            step=1,
                            interactive=True,
                            visible=False
                        )
                        rms_mix_rate0 = gr.Slider(
                            minimum=0,
                            maximum=1,
                            label="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏",
                            value=0,
                            interactive=True,
                        )
                        protect0 = gr.Slider(
                            minimum=0,
                            maximum=0.5,
                            label="–ó–∞—â–∏—Ç–∞ –æ—Ç —à—É–º–∞ –¥—ã—Ö–∞–Ω–∏—è (0 - –≤–∫–ª—é—á–µ–Ω–æ, 0.5 - –≤—ã–∫–ª—é—á–µ–Ω–æ)",
                            value=0.33,
                            step=0.01,
                            interactive=True,
                        )
                        if voice_model != None: vc.get_vc(voice_model.value,protect0,protect0)
                    file_index1 = gr.Textbox(
                        label="–ü—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å–Ω–æ–º—É —Ñ–∞–π–ª—É",
                        interactive=True,
                        visible=False#–ó–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                    )
                    refresh_button.click(
                        fn=change_choices,
                        inputs=[],
                        outputs=[voice_model, file_index2],
                        api_name="infer_refresh",
                    )
                    refresh_button.click(
                        fn=lambda:{"choices":paths_for_files('audios'),"__type__":"update"}, #TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ 'audios' —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ '.wav', '.mp3', '.ogg' –∏–ª–∏ '.flac'
                        inputs=[],
                        outputs = [input_audio0],
                    )
                    refresh_button.click(
                        fn=lambda:{"value":paths_for_files('audios')[0],"__type__":"update"} if len(paths_for_files('audios')) > 0 else {"value":"","__type__":"update"}, #TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ 'audios' —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ '.wav', '.mp3', '.ogg' –∏–ª–∏ '.flac'
                        inputs=[],
                        outputs = [input_audio0],
                    )
            with gr.Row():
                f0_file = gr.File(label="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É F0", visible=False)
            with gr.Row():
                vc_output1 = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", placeholder="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",visible=True)
                but0.click(
                    vc.vc_single,
                    [
                        spk_item,
                        input_audio0,
                        vc_transform0,
                        f0_file,
                        f0method0,
                        file_index1,
                        file_index2,
                        index_rate1,
                        filter_radius0,
                        resample_sr0,
                        rms_mix_rate0,
                        protect0,
                    ],
                    [vc_output1, vc_output2],
                    api_name="infer_convert",
                )
                voice_model.change(
                    fn=vc.get_vc,
                    inputs=[voice_model, protect0, protect0],
                    outputs=[spk_item, protect0, protect0, file_index2, file_index2],
                    api_name="infer_change_voice",
                )
        with gr.TabItem("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"):
            with gr.Row():
                url_input = gr.Textbox(label="URL –º–æ–¥–µ–ª–∏", value="",placeholder="https://...", scale=6)
                name_output = gr.Textbox(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", value="",placeholder="MyModel",scale=2)
                url_download = gr.Button(value="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å",scale=2)
                url_download.click(
                    inputs=[url_input,name_output],
                    outputs=[url_input],
                    fn=download_from_url,
                )
            with gr.Row():
                model_browser = gr.Dropdown(choices=list(model_library.models.keys()),label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",scale=5)
                download_from_browser = gr.Button(value="–ü–æ–ª—É—á–∏—Ç—å",scale=2)
                download_from_browser.click(
                    inputs=[model_browser],
                    outputs=[model_browser],
                    fn=lambda model: download_from_url(model_library.models[model],model),
                )
        with gr.TabItem("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"):
            with gr.Row():
                with gr.Column():
                    training_name = gr.Textbox(label="–î–∞–π—Ç–µ –∏–º—è —Å–≤–æ–µ–π –º–æ–¥–µ–ª–∏", value="My-Voice",placeholder="My-Voice")
                    np7 = gr.Slider(
                        minimum=0,
                        maximum=config.n_cpu,
                        step=1,
                        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ CPU, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–Ω–∞",
                        value=int(np.ceil(config.n_cpu / 1.5)),
                        interactive=True,
                    )
                    sr2 = gr.Radio(
                        label="–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏",
                        choices=["40k", "32k"],
                        value="40k",
                        interactive=True,
                        visible=False
                    )
                    if_f0_3 = gr.Radio(
                        label="–ë—É–¥–µ—Ç –ª–∏ –≤–∞—à–∞ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–µ–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ.",
                        choices=[True, False],
                        value=True,
                        interactive=True,
                        visible=False
                    )
                    version19 = gr.Radio(
                        label="–í–µ—Ä—Å–∏—è",
                        choices=["v1", "v2"],
                        value="v2",
                        interactive=True,
                        visible=False,
                    )
                    dataset_folder = gr.Textbox(
                        label="–ü–∞–ø–∫–∞ —Å –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö", value='dataset'
                    )
                    easy_uploader = gr.Files(label="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã",file_types=['audio'])
                    but1 = gr.Button("1. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", variant="primary")
                    info1 = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="",visible=True)
                    easy_uploader.upload(inputs=[dataset_folder],outputs=[],fn=lambda folder:os.makedirs(folder,exist_ok=True))
                    easy_uploader.upload(
                        fn=lambda files,folder: [shutil.copy2(f.name,os.path.join(folder,os.path.split(f.name)[1])) for f in files] if folder != "" else gr.Warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'),
                        inputs=[easy_uploader, dataset_folder],
                        outputs=[])
                    gpus6 = gr.Textbox(
                        label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ GPU —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0-1-2)",
                        value=gpus,
                        interactive=True,
                        visible=F0GPUVisible,
                    )
                    gpu_info9 = gr.Textbox(
                        label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU", value=gpu_info, visible=F0GPUVisible
                    )
                    spk_id5 = gr.Slider(
                        minimum=0,
                        maximum=4,
                        step=1,
                        label="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∏–∫–µ—Ä–∞",
                        value=0,
                        interactive=True,
                        visible=False
                    )
                    but1.click(
                        preprocess_dataset,
                        [dataset_folder, training_name, sr2, np7],
                        [info1],
                        api_name="train_preprocess",
                    )
                with gr.Column():
                    f0method8 = gr.Radio(
                        label="–ú–µ—Ç–æ–¥ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ F0",
                        choices=["pm", "harvest", "dio", "rmvpe", "rmvpe_gpu"],
                        value="rmvpe_gpu",
                        interactive=True,
                    )
                    gpus_rmvpe = gr.Textbox(
                        label="–ù–æ–º–µ—Ä–∞ GPU –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä 0-1-2)",
                        value="%s-%s" % (gpus, gpus),
                        interactive=True,
                        visible=F0GPUVisible,
                    )
                    but2 = gr.Button("2. –í—ã–¥–µ–ª–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", variant="primary")
                    info2 = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="", max_lines=8)
                    f0method8.change(
                        fn=change_f0_method,
                        inputs=[f0method8],
                        outputs=[gpus_rmvpe],
                    )
                    but2.click(
                        extract_f0_feature,
                        [
                            gpus6,
                            np7,
                            f0method8,
                            if_f0_3,
                            training_name,
                            version19,
                            gpus_rmvpe,
                        ],
                        [info2],
                        api_name="train_extract_f0_feature",
                    )
                with gr.Column():
                    total_epoch11 = gr.Slider(
                        minimum=2,
                        maximum=2000,
                        step=1,
                        label="–≠–ø–æ—Ö–∏ (–±–æ–ª—å—à–µ —ç–ø–æ—Ö –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)",
                        value=300,
                        interactive=True,
                    )
                    but4 = gr.Button("3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å", variant="primary")
                    but3 = gr.Button("4. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å", variant="primary")
                    info3 = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="", max_lines=10)
                    with gr.Accordion(label="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
                        gpus16 = gr.Textbox(
                            label="GPU —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä 0-1-2)",
                            value="0",
                            interactive=True,
                            visible=True
                        )
                        save_epoch10 = gr.Slider(
                            minimum=1,
                            maximum=50,
                            step=1,
                            label="–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
                            value=25,
                            interactive=True,
                        )
                        batch_size12 = gr.Slider(
                            minimum=1,
                            maximum=20,
                            step=1,
                            label="–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞",
                            value=default_batch_size,
                            interactive=True,
                        )
                        if_save_latest13 = gr.Radio(
                            label="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å",
                            choices=["yes", "no"],
                            value="yes",
                            interactive=True,
                            visible=False
                        )
                        if_cache_gpu17 = gr.Radio(
                            label="–ï—Å–ª–∏ –≤–∞—à –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ú–ï–ù–¨–®–ï 10 –º–∏–Ω—É—Ç, –∫—ç—à–∏—Ä—É–π—Ç–µ –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                            choices=["yes", "no"],
                            value="yes",
                            interactive=True,
                        )
                        if_save_every_weights18 = gr.Radio(
                            label="–°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                            choices=["yes", "no"],
                            value="yes",
                            interactive=True,
                        )
                        with gr.Accordion(label="–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", open=False):
                            pretrained = lambda sr, letter: [os.path.abspath(os.path.join('assets/pretrained_v2', file)) for file in os.listdir('assets/pretrained_v2') if file.endswith('.pth') and sr in file and letter in file]
                            pretrained_G14 = gr.Dropdown(
                                label="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å G",
                                # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π G –≤ assets/pretrained_v2, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –Ω–∞ .pth
                                choices = pretrained(sr2.value, 'G'),
                                value=pretrained(sr2.value, 'G')[0] if len(pretrained(sr2.value, 'G')) > 0 else '',
                                interactive=True,
                                visible=True
                            )
                            pretrained_D15 = gr.Dropdown(
                                label="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å D",
                                choices = pretrained(sr2.value, 'D'),
                                value= pretrained(sr2.value, 'D')[0] if len(pretrained(sr2.value, 'G')) > 0 else '',
                                visible=True,
                                interactive=True
                            )
                    with gr.Row():
                        download_model = gr.Button('5. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏')
                    with gr.Row():
                        model_files = gr.Files(label='–í–∞—à–∞ –º–æ–¥–µ–ª—å –∏ –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å:')
                        download_model.click(
                            fn=lambda name: os.listdir(f'assets/weights/{name}') + glob.glob(f'logs/{name.split(".")[0]}/added_*.index'),
                            inputs=[training_name],
                            outputs=[model_files, info3])
                    with gr.Row():
                        sr2.change(
                            change_sr2,
                            [sr2, if_f0_3, version19],
                            [pretrained_G14, pretrained_D15],
                        )
                        version19.change(
                            change_version19,
                            [sr2, if_f0_3, version19],
                            [pretrained_G14, pretrained_D15, sr2],
                        )
                        if_f0_3.change(
                            change_f0,
                            [if_f0_3, sr2, version19],
                            [f0method8, pretrained_G14, pretrained_D15],
                        )
                    with gr.Row():
                        but5 = gr.Button("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫", variant="primary", visible=True)
                        but3.click(
                            click_train,
                            [
                                training_name,
                                sr2,
                                if_f0_3,
                                spk_id5,
                                save_epoch10,
                                total_epoch11,
                                batch_size12,
                                if_save_latest13,
                                pretrained_G14,
                                pretrained_D15,
                                gpus16,
                                if_cache_gpu17,
                                if_save_every_weights18,
                                version19,
                            ],
                            info3,
                            api_name="train_start",
                        )
                        but4.click(train_index, [training_name, version19], info3)
                        but5.click(
                            train1key,
                            [
                                training_name,
                                sr2,
                                if_f0_3,
                                dataset_folder,
                                spk_id5,
                                np7,
                                f0method8,
                                save_epoch10,
                                total_epoch11,
                                batch_size12,
                                if_save_latest13,
                                pretrained_G14,
                                pretrained_D15,
                                gpus16,
                                if_cache_gpu17,
                                if_save_every_weights18,
                                version19,
                                gpus_rmvpe,
                            ],
                            info3,
                            api_name="train_start_all",
                        )

    if config.iscolab:
        app.queue(concurrency_count=511, max_size=1022).launch(share=True)
    else:
        app.queue(concurrency_count=511, max_size=1022).launch(
            server_name="0.0.0.0",
            inbrowser=not config.noautoopen,
            server_port=config.listen_port,
            quiet=True,
        )
